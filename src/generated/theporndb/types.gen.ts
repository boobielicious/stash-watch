// This file is auto-generated by @hey-api/openapi-ts

export type ChildSceneDataObject = {
  external_id?: string
  site?: string
}

export type MarkerDataObject = {
  end?: string | null
  name?: string
  start?: string
}

export type PerformerDataObject = {
  aliases?: Array<string>
  bio?: string
  extra?: string
  image?: string
  image_blob?: string
  name?: string
  site?: string
  url?: string
}

export type PerformerExtraDataObject = {
  astrology?: string
  birthday?: string
  birthplace?: string
  cupsize?: string
  ethnicity?: string
  eye_colour?: string
  fakeboobs?: boolean
  gender?: string
  haircolor?: string
  height?: string
  measurements?: string
  nationality?: string
  piercings?: string
  tattoos?: string
  weight?: string
}

export type PerformerSearchRequest = unknown

export type PerformerSiteSearchRequest = unknown

export type SceneDataObject = {
  /**
   * URL of Back Image
   */
  back?: string | null
  /**
   * Base64 encoded Back Image
   */
  back_blob?: string | null
  /**
   * Date of the scene
   */
  date?: string | null
  /**
   * Description of the scene
   */
  description?: string | null
  /**
   * List of director names
   */
  directors?: Array<string> | null
  /**
   * Duration of the scene in seconds
   */
  duration?: number | null
  /**
   * External ID of the scene
   */
  external_id?: string
  force_fields?: Array<string>
  force_update?: boolean | null
  format?: string | null
  hashes_data?: Array<UpsertHashObject>
  /**
   * URL of Front Image
   */
  image?: string | null
  /**
   * Base64 encoded Front Image
   */
  image_blob?: string | null
  markers?: Array<MarkerDataObject>
  movies?: Array<ChildSceneDataObject>
  /**
   * The network this site belongs to
   */
  network?: string | null
  /**
   * The website this site is on
   */
  parent?: string | null
  /**
   * List of performer names
   */
  performers?: Array<string> | null
  performers_data?: Array<PerformerDataObject>
  /**
   * URL of Poster Image
   */
  poster?: string | null
  /**
   * Base64 encoded Poster Image
   */
  poster_blob?: string | null
  scenes?: Array<ChildSceneDataObject>
  /**
   * The site this scene is on
   */
  site?: string
  /**
   * SKU of the scene
   */
  sku?: string | null
  /**
   * The store this movie is on
   */
  store?: string | null
  /**
   * List of tag names
   */
  tags?: Array<string> | null
  /**
   * The title of the scene
   */
  title?: string
  /**
   * The URL to the scene trailer
   */
  trailer?: string | null
  type?: SceneTypeEnum
  /**
   * The URL the scene was scraped from
   */
  url?: string | null
}

export type SceneSearchRequest = unknown

export type SiteSearchRequest = unknown

export type SuggestedChangesSearchRequest = unknown

export type TagSearchRequest = unknown

export type UpsertHashObject = {
  duration?: number | null
  hash?: string
  scene_id?: string | null
  type?: SceneHashEnum
  user_id?: number | null
}

export type PerformerAstrologyEnum =
  | 'AQUARIUS'
  | 'ARIES'
  | 'CANCER'
  | 'CAPRICORN'
  | 'GEMINI'
  | 'LEO'
  | 'LIBRA'
  | 'PISCES'
  | 'SAGITTARIUS'
  | 'SCORPIO'
  | 'TAURUS'
  | 'VIRGO'

export type PerformerBirthplaceCodeEnum =
  | 'Afghanistan'
  | 'Aland_Islands'
  | 'Albania'
  | 'Algeria'
  | 'American_Samoa'
  | 'Andorra'
  | 'Angola'
  | 'Anguilla'
  | 'Antarctica'
  | 'Antigua_and_Barbuda'
  | 'Argentina'
  | 'Armenia'
  | 'Aruba'
  | 'Australia'
  | 'Austria'
  | 'Azerbaijan'
  | 'Bahamas'
  | 'Bahrain'
  | 'Bangladesh'
  | 'Barbados'
  | 'Belarus'
  | 'Belgium'
  | 'Belize'
  | 'Benin'
  | 'Bermuda'
  | 'Bhutan'
  | 'Bolivia'
  | 'Bonaire_Sint_Eustatius_and_Saba'
  | 'Bosnia_and_Herzegovina'
  | 'Botswana'
  | 'Bouvet_Island'
  | 'Brazil'
  | 'British_Indian_Ocean_Territory'
  | 'Brunei_Darussalam'
  | 'Bulgaria'
  | 'Burkina_Faso'
  | 'Burundi'
  | 'Cabo_Verde'
  | 'Cambodia'
  | 'Cameroon'
  | 'Canada'
  | 'Cayman_Islands'
  | 'Central_African_Republic'
  | 'Chad'
  | 'Chile'
  | 'China'
  | 'Christmas_Island'
  | 'Cocos_Islands'
  | 'Colombia'
  | 'Comoros'
  | 'Congo'
  | 'Congo_Democratic_Republic'
  | 'Cook_Islands'
  | 'Costa_Rica'
  | 'Cote_d_Ivoire'
  | 'Croatia'
  | 'Cuba'
  | 'Curacao'
  | 'Cyprus'
  | 'Czechia'
  | 'Denmark'
  | 'Djibouti'
  | 'Dominica'
  | 'Dominican_Republic'
  | 'Ecuador'
  | 'Egypt'
  | 'El_Salvador'
  | 'Equatorial_Guinea'
  | 'Eritrea'
  | 'Estonia'
  | 'Eswatini'
  | 'Ethiopia'
  | 'Falkland_Islands'
  | 'Faroe_Islands'
  | 'Fiji'
  | 'Finland'
  | 'France'
  | 'French_Guiana'
  | 'French_Polynesia'
  | 'French_Southern_Territories'
  | 'Gabon'
  | 'Gambia'
  | 'Georgia'
  | 'Germany'
  | 'Ghana'
  | 'Gibraltar'
  | 'Greece'
  | 'Greenland'
  | 'Grenada'
  | 'Guadeloupe'
  | 'Guam'
  | 'Guatemala'
  | 'Guernsey'
  | 'Guinea'
  | 'Guinea_Bissau'
  | 'Guyana'
  | 'Haiti'
  | 'Heard_Island_and_McDonald_Islands'
  | 'Holy_See'
  | 'Honduras'
  | 'Hong_Kong'
  | 'Hungary'
  | 'Iceland'
  | 'India'
  | 'Indonesia'
  | 'Iran'
  | 'Iraq'
  | 'Ireland'
  | 'Isle_of_Man'
  | 'Israel'
  | 'Italy'
  | 'Jamaica'
  | 'Japan'
  | 'Jersey'
  | 'Jordan'
  | 'Kazakhstan'
  | 'Kenya'
  | 'Kiribati'
  | 'Korea_Democratic_Peoples_Republic'
  | 'Korea_Republic'
  | 'Kuwait'
  | 'Kyrgyzstan'
  | 'Lao_Peoples_Democratic_Republic'
  | 'Latvia'
  | 'Lebanon'
  | 'Lesotho'
  | 'Liberia'
  | 'Libya'
  | 'Liechtenstein'
  | 'Lithuania'
  | 'Luxembourg'
  | 'Macao'
  | 'Madagascar'
  | 'Malawi'
  | 'Malaysia'
  | 'Maldives'
  | 'Mali'
  | 'Malta'
  | 'Marshall_Islands'
  | 'Martinique'
  | 'Mauritania'
  | 'Mauritius'
  | 'Mayotte'
  | 'Mexico'
  | 'Micronesia'
  | 'Moldova'
  | 'Monaco'
  | 'Mongolia'
  | 'Montenegro'
  | 'Montserrat'
  | 'Morocco'
  | 'Mozambique'
  | 'Myanmar'
  | 'Namibia'
  | 'Nauru'
  | 'Nepal'
  | 'Netherlands'
  | 'New_Caledonia'
  | 'New_Zealand'
  | 'Nicaragua'
  | 'Niger'
  | 'Nigeria'
  | 'Niue'
  | 'Norfolk_Island'
  | 'North_Macedonia'
  | 'Northern_Mariana_Islands'
  | 'Norway'
  | 'Oman'
  | 'Pakistan'
  | 'Palau'
  | 'Palestine'
  | 'Panama'
  | 'Papua_New_Guinea'
  | 'Paraguay'
  | 'Peru'
  | 'Philippines'
  | 'Pitcairn'
  | 'Poland'
  | 'Portugal'
  | 'Puerto_Rico'
  | 'Qatar'
  | 'Reunion'
  | 'Romania'
  | 'Russian_Federation'
  | 'Rwanda'
  | 'Saint_Barthelemy'
  | 'Saint_Helena_Ascension_Tristan_da_Cunha'
  | 'Saint_Kitts_and_Nevis'
  | 'Saint_Lucia'
  | 'Saint_Martin_French_part'
  | 'Saint_Pierre_and_Miquelon'
  | 'Saint_Vincent_and_the_Grenadines'
  | 'Samoa'
  | 'San_Marino'
  | 'Sao_Tome_and_Principe'
  | 'Saudi_Arabia'
  | 'Senegal'
  | 'Serbia'
  | 'Seychelles'
  | 'Sierra_Leone'
  | 'Singapore'
  | 'Sint_Maarten_Dutch_part'
  | 'Slovakia'
  | 'Slovenia'
  | 'Solomon_Islands'
  | 'Somalia'
  | 'South_Africa'
  | 'South_Georgia_South_Sandwich_Islands'
  | 'South_Sudan'
  | 'Spain'
  | 'Sri_Lanka'
  | 'Sudan'
  | 'Suriname'
  | 'Svalbard_Jan_Mayen'
  | 'Sweden'
  | 'Switzerland'
  | 'Syrian_Arab_Republic'
  | 'Taiwan_Province_of_China'
  | 'Tajikistan'
  | 'Tanzania'
  | 'Thailand'
  | 'Timor_Leste'
  | 'Togo'
  | 'Tokelau'
  | 'Tonga'
  | 'Trinidad_and_Tobago'
  | 'Tunisia'
  | 'Turkey'
  | 'Turkmenistan'
  | 'Turks_and_Caicos_Islands'
  | 'Tuvalu'
  | 'Uganda'
  | 'Ukraine'
  | 'United_Arab_Emirates'
  | 'United_Kingdom'
  | 'United_States_of_America'
  | 'United_States_Outlying_Islands'
  | 'Uruguay'
  | 'Uzbekistan'
  | 'Vanuatu'
  | 'Venezuela'
  | 'Viet_Nam'
  | 'Virgin_Islands_British'
  | 'Virgin_Islands_U_S'
  | 'Wallis_and_Futuna'
  | 'Western_Sahara'
  | 'Yemen'
  | 'Zambia'
  | 'Zimbabwe'

export type PerformerEthnicityEnum =
  | 'ASIAN'
  | 'BLACK'
  | 'CAUCASIAN'
  | 'INDIAN'
  | 'LATIN'
  | 'MIDDLE_EASTERN'
  | 'MIXED'
  | 'OTHER'

export type PerformerEyeColourEnum = 'BLUE' | 'BROWN' | 'GREEN' | 'GREY' | 'HAZEL' | 'RED'

export type PerformerGenderEnum =
  | 'FEMALE'
  | 'INTERSEX'
  | 'MALE'
  | 'NON_BINARY'
  | 'TRANSGENDER_FEMALE'
  | 'TRANSGENDER_MALE'
  | 'UNKNOWN'

export type PerformerHairColourEnum =
  | 'AUBURN'
  | 'BALD'
  | 'BLACK'
  | 'BLONDE'
  | 'BRUNETTE'
  | 'GREY'
  | 'OTHER'
  | 'RED'
  | 'VARIOUS'
  | 'WHITE'

export type PerformerOrderEnum =
  | 'ASC_NAME'
  | 'DESC_NAME'
  | 'MOST_RELEVANT'
  | 'RECENTLY_BIRTHED'
  | 'RECENTLY_CREATED'
  | 'RECENTLY_UPDATED'
  | 'REVERSE_BIRTHED'
  | 'REVERSE_CREATED'
  | 'REVERSE_UPDATED'

export type PerformerSiteOrderEnum =
  | 'ASC_NAME'
  | 'DESC_NAME'
  | 'MOST_RELEVANT'
  | 'RECENTLY_CREATED'
  | 'RECENTLY_UPDATED'
  | 'REVERSE_CREATED'
  | 'REVERSE_UPDATED'

export type PerformerSiteParentOperationEnum = 'DOESNT_HAVE_PARENT' | 'HAVE_PARENT'

export type QueryOperationEnum = 'direct' | 'parse'

export type SceneHashEnum = 'OSHASH' | 'PHASH'

export type SceneTypeEnum = 'JAV' | 'Movie' | 'Scene'

export type SearchOperationEnum = '=' | '>' | '>=' | '<' | '<='

export type SearchOrderEnum =
  | 'duration_asc'
  | 'duration_desc'
  | 'former_created'
  | 'former_released'
  | 'former_updated'
  | 'most_relevant'
  | 'recently_created'
  | 'recently_released'
  | 'recently_updated'

export type SearchSiteOperationEnum =
  | 'Network'
  | 'Parent'
  | 'Site'
  | 'Site/Network'
  | 'Site/Parent'
  | 'Site/Parent/Network'

export type SiteOrderEnum =
  | 'ASC_NAME'
  | 'DESC_NAME'
  | 'MOST_RELEVANT'
  | 'RECENTLY_CREATED'
  | 'RECENTLY_UPDATED'
  | 'REVERSE_CREATED'
  | 'REVERSE_UPDATED'

export type SuggestedChangesOrderEnum = 'RECENTLY_CREATED' | 'RECENTLY_UPDATED' | 'REVERSE_CREATED' | 'REVERSE_UPDATED'

export type SuggestedChangesSourceEnum = 'stash' | 'unknown' | 'web'

export type SuggestedChangesStatusEnum = 'accepted' | 'pending' | 'processing' | 'rejected'

export type SuggestedChangesTypeEnum = 'edit' | 'merge'

export type TagOrderEnum =
  | 'ASC_NAME'
  | 'DESC_NAME'
  | 'MOST_RELEVANT'
  | 'RECENTLY_CREATED'
  | 'RECENTLY_UPDATED'
  | 'REVERSE_CREATED'
  | 'REVERSE_UPDATED'

export type ChangesResource = {
  id?: number
  uuid?: string
}

export type DirectorResource = {
  id?: number
  uuid?: string
  name?: string
  slug?: string
}

/**
 * A resource that contains information about an image
 */
export type MediaResource = {
  id?: number
  url?: string
  size?: number
  order?: number
}

/**
 * Contains information about a performer
 */
export type PerformerResource = {
  id?: string
  _id?: number
  slug?: string
  name?: string
  disambiguation?: string
  bio?: string | null
  rating?: number
  is_parent?: boolean
  extras?: {
    gender?: string | null
    birthday?: string | null
    birthday_timestamp?: number | null
    deathday?: string | null
    deathday_timestamp?: number | null
    birthplace?: string | null
    birthplace_code?: string | null
    astrology?: string | null
    ethnicity?: string | null
    nationality?: string | null
    hair_colour?: string | null
    eye_colour?: string | null
    weight?: string | null
    height?: string | null
    measurements?: string | null
    cupsize?: string | null
    tattoos?: string | null
    piercings?: string | null
    waist?: string | null
    hips?: string | null
    career_start_year?: number | null
    career_end_year?: number | null
    fake_boobs?: boolean
    same_sex_only?: boolean
    links?: {
      [key: string]: string | null
    } | null
  }
  aliases?: Array<string> | null
  image?: string
  thumbnail?: string
  face?: string
  posters?: Array<MediaResource> | null
  site_performers?: Array<PerformerSiteResource> | null
}

export type PerformerSiteResource = {
  /**
   * The performer site uuid
   */
  id?: string
  /**
   * The performer site id
   */
  _id?: number
  /**
   * The performer site id
   */
  site_id?: number
  /**
   * The performer site name
   */
  name?: string
  bio?: string
  /**
   * Whether the performer is a parent entity of another performer
   */
  is_parent?: boolean
  extras?: PerformerExtraDataObject
  image?: string
  thumbnail?: string
  face?: string
  scenes?: Array<SceneResource>
  parent?: PerformerResource
  site?: SiteResource
}

/**
 * Describes a marker start and end time
 */
export type MarkerResource = {
  id?: number
  title?: string
  start_time?: number
  end_time?: number | null
  created_at?: string
}

export type SceneResource = {
  id?: string
  _id?: number
  title?: string
  type?: string
  slug?: string
  external_id?: string
  description?: string
  rating?: number
  site_id?: number
  date?: string
  url?: string
  image?: string
  back_image?: string
  poster_image?: string
  poster?: string
  trailer?: string
  duration?: number
  format?: string
  sku?: string
  background?: {
    full?: string
    large?: string
    medium?: string
    small?: string
  }
  media?: MediaResource
  created?: string
  last_updated?: string
  performers?: Array<PerformerResource>
  site?: SiteResource
  tags?: Array<TagResource>
  hashes?: Array<SceneHashBasicResponse>
  markers?: Array<MarkerResource>
  directors?: Array<DirectorResource>
  /**
   * If this entity is a movie, contains scenes attached
   */
  scenes?: Array<SceneResource>
  /**
   * If this entity is a scene, contains movies this scene appears in
   */
  movies?: Array<SceneResource>
  links?: {
    [key: string]: string | null
  } | null
}

export type SiteResource = {
  uuid?: string
  id?: number
  parent_id?: number
  network_id?: number
  name?: string
  short_name?: string
  url?: string
  description?: string
  rating?: number
  logo?: string
  favicon?: string
  poster?: string
  network?: SiteResource
  parent?: SiteResource
}

export type TagResource = {
  id?: number
  uuid?: string
  name?: string
  parents?: Array<TagResource>
}

/**
 * A resource that contains information about a user
 */
export type UserResource = {
  id?: number
  name?: string
}

export type SceneHashBasicResponse = {
  can_delete?: boolean | null
  created_at?: string
  duration?: number
  hash?: string
  id?: number
  scene_id?: number
  submissions?: number
  type?: SceneHashEnum
  updated_at?: string
}

export type SceneCardResponse = {
  background?: unknown
  date?: string | null
  default_background?: string | null
  duration?: number | null
  id?: number | null
  is_collected?: boolean | null
  is_hidden?: boolean | null
  link?: string | null
  performers?: unknown
  site?: unknown
  slug?: string | null
  title?: string | null
  type?: SceneTypeEnum
}

/**
 * Pagination meta data
 */
export type Meta = {
  total?: number
  per_page?: number
  current_page?: number
  last?: number
}

export type PerformerSearchRequestAge = number

export type PerformerSearchRequestAgeOperation = SearchOperationEnum

export type PerformerSearchRequestBand = number

export type PerformerSearchRequestBandOperation = SearchOperationEnum

export type PerformerSearchRequestBirthplaceCode = PerformerBirthplaceCodeEnum

export type PerformerSearchRequestCup = string

export type PerformerSearchRequestEthnicity = PerformerEthnicityEnum

export type PerformerSearchRequestEyeColour = PerformerEyeColourEnum

export type PerformerSearchRequestFakeBoobs = boolean

export type PerformerSearchRequestGender = PerformerGenderEnum

export type PerformerSearchRequestHairColour = PerformerHairColourEnum

export type PerformerSearchRequestHeight = number

export type PerformerSearchRequestHeightOperation = SearchOperationEnum

export type PerformerSearchRequestHip = number

export type PerformerSearchRequestHipOperation = SearchOperationEnum

export type PerformerSearchRequestIsHidden = boolean

/**
 * The letter the name begins with
 */
export type PerformerSearchRequestLetter = string

export type PerformerSearchRequestNationality = string

export type PerformerSearchRequestNoGender = boolean

export type PerformerSearchRequestOrderBy = PerformerOrderEnum

/**
 * The number of results per page
 */
export type PerformerSearchRequestPerPage = number

/**
 * The search query
 */
export type PerformerSearchRequestQ = string

export type PerformerSearchRequestSameSexOnly = boolean

export type PerformerSearchRequestWaist = number

export type PerformerSearchRequestWaistOperation = SearchOperationEnum

export type PerformerSearchRequestWeight = number

export type PerformerSearchRequestWeightOperation = SearchOperationEnum

export type PerformerSiteSearchRequestIsHidden = boolean

/**
 * The letter the name begins with
 */
export type PerformerSiteSearchRequestLetter = string

export type PerformerSiteSearchRequestOrderBy = PerformerSiteOrderEnum

/**
 * The parent to filter by
 */
export type PerformerSiteSearchRequestParent = string

/**
 * The parent ID to filter by
 */
export type PerformerSiteSearchRequestParentId = number

export type PerformerSiteSearchRequestParentOperation = PerformerSiteParentOperationEnum

/**
 * The number of results per page
 */
export type PerformerSiteSearchRequestPerPage = number

/**
 * The search query
 */
export type PerformerSiteSearchRequestQ = string

/**
 * The site to filter by
 */
export type PerformerSiteSearchRequestSite = string

/**
 * The site ID to filter by
 */
export type PerformerSiteSearchRequestSiteId = number

/**
 * The category ID to filter by
 */
export type SceneSearchRequestCategoryId = number

/**
 * The date to filter by
 */
export type SceneSearchRequestDate = string

export type SceneSearchRequestDateOperation = SearchOperationEnum

/**
 * Whether to filter by all directors or any
 */
export type SceneSearchRequestDirectorAnd = boolean

/**
 * The director ID to filter by
 */
export type SceneSearchRequestDirectorId = number

/**
 * The directors to filter by
 */
export type SceneSearchRequestDirectors = Array<string>

/**
 * The duration to filter by
 */
export type SceneSearchRequestDuration = number

export type SceneSearchRequestDurationOperation = SearchOperationEnum

/**
 * The external ID to filter by
 */
export type SceneSearchRequestExternalId = string

/**
 * The hash to filter by
 */
export type SceneSearchRequestHash = string

export type SceneSearchRequestHashType = SceneHashEnum

/**
 * Whether the scene is in your collection
 */
export type SceneSearchRequestIsCollected = boolean

/**
 * Whether the scene is in your favourites
 */
export type SceneSearchRequestIsFavourite = boolean

export type SceneSearchRequestIsHidden = boolean

/**
 * Whether to filter by no performer genders
 */
export type SceneSearchRequestNoPerformerGenders = boolean

/**
 * Whether to filter by no performers
 */
export type SceneSearchRequestNoPerformers = boolean

export type SceneSearchRequestOrderBy = SearchOrderEnum

/**
 * Parse a string into a searchable phrase
 */
export type SceneSearchRequestParse = string

/**
 * The number of results per page
 */
export type SceneSearchRequestPerPage = number

/**
 * Whether to filter by all performers or any
 */
export type SceneSearchRequestPerformerAnd = boolean

/**
 * Whether to filter by all performer genders or any
 */
export type SceneSearchRequestPerformerGenderAnd = boolean

/**
 * Whether to filter by all performer genders only
 */
export type SceneSearchRequestPerformerGenderOnly = boolean

/**
 * The performer genders to filter by
 */
export type SceneSearchRequestPerformerGenders = Array<string>

/**
 * The performer ID to filter by
 */
export type SceneSearchRequestPerformerId = number

/**
 * The performer names to filter by
 */
export type SceneSearchRequestPerformers = {
  [key: string]: unknown
}

/**
 * The search query
 */
export type SceneSearchRequestQ = string

export type SceneSearchRequestQueryOperation = SearchOperationEnum

/**
 * The site to filter by
 */
export type SceneSearchRequestSite = string

/**
 * Whether to filter by all sites or any
 */
export type SceneSearchRequestSiteAnd = boolean

/**
 * The site ID to filter by
 */
export type SceneSearchRequestSiteId = number

export type SceneSearchRequestSiteOperation = SearchSiteOperationEnum

/**
 * The site names to filter by
 */
export type SceneSearchRequestSites = {
  [key: string]: unknown
}

/**
 * The SKU to filter by
 */
export type SceneSearchRequestSku = string

/**
 * Whether to filter by all tags or any
 */
export type SceneSearchRequestTagAnd = boolean

/**
 * The tags to filter by
 */
export type SceneSearchRequestTags = {
  [key: string]: unknown
}

/**
 * The title to search by
 */
export type SceneSearchRequestTitle = string

/**
 * The url to filter by
 */
export type SceneSearchRequestUrl = string

/**
 * The scene release year
 */
export type SceneSearchRequestYear = number

/**
 * The search first letter
 */
export type SiteSearchRequestLetter = string

/**
 * The network to filter by
 */
export type SiteSearchRequestNetwork = string

/**
 * The network ID to filter by
 */
export type SiteSearchRequestNetworkId = number

export type SiteSearchRequestOrderBy = SiteOrderEnum

/**
 * The parent to filter by
 */
export type SiteSearchRequestParent = string

/**
 * The parent ID to filter by
 */
export type SiteSearchRequestParentId = number

/**
 * The number of results per page
 */
export type SiteSearchRequestPerPage = number

/**
 * The search query
 */
export type SiteSearchRequestQ = string

/**
 * The user id of changes
 */
export type SuggestedChangesSearchRequestModelId = number

/**
 * The user id of changes
 */
export type SuggestedChangesSearchRequestModelType = string

export type SuggestedChangesSearchRequestOrderBy = SuggestedChangesOrderEnum

/**
 * The number of results per page
 */
export type SuggestedChangesSearchRequestPerPage = number

export type SuggestedChangesSearchRequestSource = SuggestedChangesSourceEnum

export type SuggestedChangesSearchRequestStatus = SuggestedChangesStatusEnum

/**
 * The user id of changes
 */
export type SuggestedChangesSearchRequestUserId = number

export type TagSearchRequestOrderBy = TagOrderEnum

/**
 * The number of results per page
 */
export type TagSearchRequestPerPage = number

/**
 * The search query
 */
export type TagSearchRequestQ = string

/**
 * The type of scene to get
 */
export type SceneType = 'JAV' | 'Movie' | 'Scene'

/**
 * The number of results on page
 */
export type PerPage = number

/**
 * The page of results to return
 */
export type Page = number

/**
 * Identifier for this entity, can be slug, id or uuid
 */
export type Identifier = string

export type SearchScenesData = {
  body?: never
  path?: never
  query?: {
    /**
     * The category ID to filter by
     */
    category_id?: number
    /**
     * The date to filter by
     */
    date?: string
    date_operation?: SearchOperationEnum
    /**
     * Whether to filter by all directors or any
     */
    director_and?: boolean
    /**
     * The director ID to filter by
     */
    director_id?: number
    /**
     * The directors to filter by
     */
    directors?: Array<string>
    /**
     * The duration to filter by
     */
    duration?: number
    /**
     * The external ID to filter by
     */
    external_id?: string
    /**
     * The hash to filter by
     */
    hash?: string
    hashType?: SceneHashEnum
    /**
     * Whether the scene is in your collection
     */
    is_collected?: boolean
    /**
     * Whether the scene is in your favourites
     */
    is_favourite?: boolean
    orderBy?: SearchOrderEnum
    /**
     * Parse a string into a searchable phrase
     */
    parse?: string
    /**
     * The number of results per page
     */
    per_page?: number
    /**
     * Whether to filter by all performers or any
     */
    performer_and?: boolean
    /**
     * Whether to filter by all performer genders or any
     */
    performer_gender_and?: boolean
    /**
     * Whether to filter by all performer genders only
     */
    performer_gender_only?: boolean
    /**
     * The performer genders to filter by
     */
    performer_genders?: Array<string>
    /**
     * The performer ID to filter by
     */
    performer_id?: number
    /**
     * The performer names to filter by
     */
    performers?: {
      [key: string]: unknown
    }
    /**
     * The search query
     */
    q?: string
    /**
     * The site to filter by
     */
    site?: string
    /**
     * The site ID to filter by
     */
    site_id?: number
    site_operation?: SearchSiteOperationEnum
    /**
     * The SKU to filter by
     */
    sku?: string
    /**
     * Whether to filter by all tags or any
     */
    tag_and?: boolean
    /**
     * The tags to filter by
     */
    tags?: {
      [key: string]: unknown
    }
    /**
     * The title to search by
     */
    title?: string
    /**
     * The url to filter by
     */
    url?: string
    /**
     * The scene release year
     */
    year?: number
    /**
     * The page of results to return
     */
    page?: number
  }
  url: '/scenes'
}

export type SearchScenesResponses = {
  /**
   * List/Search Scenes
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
    meta?: Meta
  }
}

export type SearchScenesResponse = SearchScenesResponses[keyof SearchScenesResponses]

export type CreateSceneData = {
  /**
   * Create Scene
   */
  body?: SceneDataObject
  path?: never
  query?: never
  url: '/scenes'
}

export type CreateSceneErrors = {
  /**
   * Unauthorized
   */
  403: {
    /**
     * Error message
     */
    message?: string
  }
}

export type CreateSceneError = CreateSceneErrors[keyof CreateSceneErrors]

export type CreateSceneResponses = {
  /**
   * Create Scene
   */
  200: {
    [key: string]: unknown
  }
}

export type CreateSceneResponse = CreateSceneResponses[keyof CreateSceneResponses]

export type SearchJavData = {
  body?: never
  path?: never
  query?: {
    /**
     * The category ID to filter by
     */
    category_id?: number
    /**
     * The date to filter by
     */
    date?: string
    date_operation?: SearchOperationEnum
    /**
     * Whether to filter by all directors or any
     */
    director_and?: boolean
    /**
     * The director ID to filter by
     */
    director_id?: number
    /**
     * The directors to filter by
     */
    directors?: Array<string>
    /**
     * The duration to filter by
     */
    duration?: number
    /**
     * The external ID to filter by
     */
    external_id?: string
    /**
     * The hash to filter by
     */
    hash?: string
    hashType?: SceneHashEnum
    /**
     * Whether the scene is in your collection
     */
    is_collected?: boolean
    /**
     * Whether the scene is in your favourites
     */
    is_favourite?: boolean
    orderBy?: SearchOrderEnum
    /**
     * Parse a string into a searchable phrase
     */
    parse?: string
    /**
     * The number of results per page
     */
    per_page?: number
    /**
     * Whether to filter by all performers or any
     */
    performer_and?: boolean
    /**
     * Whether to filter by all performer genders or any
     */
    performer_gender_and?: boolean
    /**
     * Whether to filter by all performer genders only
     */
    performer_gender_only?: boolean
    /**
     * The performer genders to filter by
     */
    performer_genders?: Array<string>
    /**
     * The performer ID to filter by
     */
    performer_id?: number
    /**
     * The performer names to filter by
     */
    performers?: {
      [key: string]: unknown
    }
    /**
     * The search query
     */
    q?: string
    /**
     * The site to filter by
     */
    site?: string
    /**
     * The site ID to filter by
     */
    site_id?: number
    site_operation?: SearchSiteOperationEnum
    /**
     * The SKU to filter by
     */
    sku?: string
    /**
     * Whether to filter by all tags or any
     */
    tag_and?: boolean
    /**
     * The tags to filter by
     */
    tags?: {
      [key: string]: unknown
    }
    /**
     * The title to search by
     */
    title?: string
    /**
     * The url to filter by
     */
    url?: string
    /**
     * The scene release year
     */
    year?: number
    /**
     * The page of results to return
     */
    page?: number
  }
  url: '/jav'
}

export type SearchJavResponses = {
  /**
   * List/Search Jav
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
    meta?: Meta
  }
}

export type SearchJavResponse = SearchJavResponses[keyof SearchJavResponses]

export type CreateJavData = {
  /**
   * Create Jav
   */
  body?: SceneDataObject
  path?: never
  query?: never
  url: '/jav'
}

export type CreateJavErrors = {
  /**
   * Unauthorized
   */
  403: {
    /**
     * Error message
     */
    message?: string
  }
}

export type CreateJavError = CreateJavErrors[keyof CreateJavErrors]

export type CreateJavResponses = {
  /**
   * Create Jav
   */
  200: {
    [key: string]: unknown
  }
}

export type CreateJavResponse = CreateJavResponses[keyof CreateJavResponses]

export type SearchMoviesData = {
  body?: never
  path?: never
  query?: {
    /**
     * The category ID to filter by
     */
    category_id?: number
    /**
     * The date to filter by
     */
    date?: string
    date_operation?: SearchOperationEnum
    /**
     * Whether to filter by all directors or any
     */
    director_and?: boolean
    /**
     * The director ID to filter by
     */
    director_id?: number
    /**
     * The directors to filter by
     */
    directors?: Array<string>
    /**
     * The duration to filter by
     */
    duration?: number
    /**
     * The external ID to filter by
     */
    external_id?: string
    /**
     * The hash to filter by
     */
    hash?: string
    hashType?: SceneHashEnum
    /**
     * Whether the scene is in your collection
     */
    is_collected?: boolean
    /**
     * Whether the scene is in your favourites
     */
    is_favourite?: boolean
    orderBy?: SearchOrderEnum
    /**
     * Parse a string into a searchable phrase
     */
    parse?: string
    /**
     * The number of results per page
     */
    per_page?: number
    /**
     * Whether to filter by all performers or any
     */
    performer_and?: boolean
    /**
     * Whether to filter by all performer genders or any
     */
    performer_gender_and?: boolean
    /**
     * Whether to filter by all performer genders only
     */
    performer_gender_only?: boolean
    /**
     * The performer genders to filter by
     */
    performer_genders?: Array<string>
    /**
     * The performer ID to filter by
     */
    performer_id?: number
    /**
     * The performer names to filter by
     */
    performers?: {
      [key: string]: unknown
    }
    /**
     * The search query
     */
    q?: string
    /**
     * The site to filter by
     */
    site?: string
    /**
     * The site ID to filter by
     */
    site_id?: number
    site_operation?: SearchSiteOperationEnum
    /**
     * The SKU to filter by
     */
    sku?: string
    /**
     * Whether to filter by all tags or any
     */
    tag_and?: boolean
    /**
     * The tags to filter by
     */
    tags?: {
      [key: string]: unknown
    }
    /**
     * The title to search by
     */
    title?: string
    /**
     * The url to filter by
     */
    url?: string
    /**
     * The scene release year
     */
    year?: number
    /**
     * The page of results to return
     */
    page?: number
  }
  url: '/movies'
}

export type SearchMoviesResponses = {
  /**
   * List/Search Movies
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
    meta?: Meta
  }
}

export type SearchMoviesResponse = SearchMoviesResponses[keyof SearchMoviesResponses]

export type CreateMovieData = {
  /**
   * Create Movie
   */
  body?: SceneDataObject
  path?: never
  query?: never
  url: '/movies'
}

export type CreateMovieErrors = {
  /**
   * Unauthorized
   */
  403: {
    /**
     * Error message
     */
    message?: string
  }
}

export type CreateMovieError = CreateMovieErrors[keyof CreateMovieErrors]

export type CreateMovieResponses = {
  /**
   * Create Movie
   */
  200: {
    [key: string]: unknown
  }
}

export type CreateMovieResponse = CreateMovieResponses[keyof CreateMovieResponses]

export type GetPerformerScenesData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: {
    /**
     * The page of results to return
     */
    page?: number
    /**
     * The number of results on page
     */
    per_page?: number
  }
  url: '/performers/{identifier}/scenes'
}

export type GetPerformerScenesResponses = {
  /**
   * List Performer Scenes
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
    meta?: Meta
  }
}

export type GetPerformerScenesResponse = GetPerformerScenesResponses[keyof GetPerformerScenesResponses]

export type GetPerformerJavData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: {
    /**
     * The page of results to return
     */
    page?: number
    /**
     * The number of results on page
     */
    per_page?: number
  }
  url: '/performers/{identifier}/jav'
}

export type GetPerformerJavResponses = {
  /**
   * List Performer Jav
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
    meta?: Meta
  }
}

export type GetPerformerJavResponse = GetPerformerJavResponses[keyof GetPerformerJavResponses]

export type GetPerformerMoviesData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: {
    /**
     * The page of results to return
     */
    page?: number
    /**
     * The number of results on page
     */
    per_page?: number
  }
  url: '/performers/{identifier}/movies'
}

export type GetPerformerMoviesResponses = {
  /**
   * List Performer Movies
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
    meta?: Meta
  }
}

export type GetPerformerMoviesResponse = GetPerformerMoviesResponses[keyof GetPerformerMoviesResponses]

export type GetSceneData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: {
    /**
     * Add to collection
     */
    add_to_collection?: boolean
  }
  url: '/scenes/{identifier}'
}

export type GetSceneErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type GetSceneError = GetSceneErrors[keyof GetSceneErrors]

export type GetSceneResponses = {
  /**
   * Get Scene
   */
  200: {
    data?: SceneResource
  }
}

export type GetSceneResponse = GetSceneResponses[keyof GetSceneResponses]

export type GetJavData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: {
    /**
     * Add to collection
     */
    add_to_collection?: boolean
  }
  url: '/jav/{identifier}'
}

export type GetJavErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type GetJavError = GetJavErrors[keyof GetJavErrors]

export type GetJavResponses = {
  /**
   * Get Jav
   */
  200: {
    data?: SceneResource
  }
}

export type GetJavResponse = GetJavResponses[keyof GetJavResponses]

export type GetMovieData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: {
    /**
     * Add to collection
     */
    add_to_collection?: boolean
  }
  url: '/movies/{identifier}'
}

export type GetMovieErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type GetMovieError = GetMovieErrors[keyof GetMovieErrors]

export type GetMovieResponses = {
  /**
   * Get Movie
   */
  200: {
    data?: SceneResource
  }
}

export type GetMovieResponse = GetMovieResponses[keyof GetMovieResponses]

export type FindSceneHashData = {
  body?: never
  path: {
    /**
     * Hash
     */
    hash: string
  }
  query?: {
    /**
     * Hash Type
     */
    type?: SceneHashEnum
  }
  url: '/scenes/hash/{hash}'
}

export type FindSceneHashErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type FindSceneHashError = FindSceneHashErrors[keyof FindSceneHashErrors]

export type FindSceneHashResponses = {
  /**
   * Get Scene
   */
  200: {
    data?: SceneResource
  }
}

export type FindSceneHashResponse = FindSceneHashResponses[keyof FindSceneHashResponses]

export type FindJavHashData = {
  body?: never
  path: {
    /**
     * Hash
     */
    hash: string
  }
  query?: {
    /**
     * Hash Type
     */
    type?: SceneHashEnum
  }
  url: '/jav/hash/{hash}'
}

export type FindJavHashErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type FindJavHashError = FindJavHashErrors[keyof FindJavHashErrors]

export type FindJavHashResponses = {
  /**
   * Get Jav
   */
  200: {
    data?: SceneResource
  }
}

export type FindJavHashResponse = FindJavHashResponses[keyof FindJavHashResponses]

export type FindMovieHashData = {
  body?: never
  path: {
    /**
     * Hash
     */
    hash: string
  }
  query?: {
    /**
     * Hash Type
     */
    type?: SceneHashEnum
  }
  url: '/movies/hash/{hash}'
}

export type FindMovieHashErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type FindMovieHashError = FindMovieHashErrors[keyof FindMovieHashErrors]

export type FindMovieHashResponses = {
  /**
   * Get Movie
   */
  200: {
    data?: SceneResource
  }
}

export type FindMovieHashResponse = FindMovieHashResponses[keyof FindMovieHashResponses]

export type GetScenesSimilarData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: never
  url: '/scenes/{identifier}/similar'
}

export type GetScenesSimilarErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type GetScenesSimilarError = GetScenesSimilarErrors[keyof GetScenesSimilarErrors]

export type GetScenesSimilarResponses = {
  /**
   * List/Search Scenes
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
  }
}

export type GetScenesSimilarResponse = GetScenesSimilarResponses[keyof GetScenesSimilarResponses]

export type GetJavSimilarData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: never
  url: '/jav/{identifier}/similar'
}

export type GetJavSimilarErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type GetJavSimilarError = GetJavSimilarErrors[keyof GetJavSimilarErrors]

export type GetJavSimilarResponses = {
  /**
   * List/Search Jav
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
  }
}

export type GetJavSimilarResponse = GetJavSimilarResponses[keyof GetJavSimilarResponses]

export type GetMoviesSimilarData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: never
  url: '/movies/{identifier}/similar'
}

export type GetMoviesSimilarErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type GetMoviesSimilarError = GetMoviesSimilarErrors[keyof GetMoviesSimilarErrors]

export type GetMoviesSimilarResponses = {
  /**
   * List/Search Movies
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
  }
}

export type GetMoviesSimilarResponse = GetMoviesSimilarResponses[keyof GetMoviesSimilarResponses]

export type GetScenesSimilarByIdsData = {
  body?: never
  path?: never
  query: {
    ids: string
  }
  url: '/scenes/similar'
}

export type GetScenesSimilarByIdsErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type GetScenesSimilarByIdsError = GetScenesSimilarByIdsErrors[keyof GetScenesSimilarByIdsErrors]

export type GetScenesSimilarByIdsResponses = {
  /**
   * List/Search Scenes
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
  }
}

export type GetScenesSimilarByIdsResponse = GetScenesSimilarByIdsResponses[keyof GetScenesSimilarByIdsResponses]

export type GetJavSimilarByIdsData = {
  body?: never
  path?: never
  query: {
    ids: string
  }
  url: '/jav/similar'
}

export type GetJavSimilarByIdsErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type GetJavSimilarByIdsError = GetJavSimilarByIdsErrors[keyof GetJavSimilarByIdsErrors]

export type GetJavSimilarByIdsResponses = {
  /**
   * List/Search Jav
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
  }
}

export type GetJavSimilarByIdsResponse = GetJavSimilarByIdsResponses[keyof GetJavSimilarByIdsResponses]

export type GetMoviesSimilarByIdsData = {
  body?: never
  path?: never
  query: {
    ids: string
  }
  url: '/movies/similar'
}

export type GetMoviesSimilarByIdsErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type GetMoviesSimilarByIdsError = GetMoviesSimilarByIdsErrors[keyof GetMoviesSimilarByIdsErrors]

export type GetMoviesSimilarByIdsResponses = {
  /**
   * List/Search Movies
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
  }
}

export type GetMoviesSimilarByIdsResponse = GetMoviesSimilarByIdsResponses[keyof GetMoviesSimilarByIdsResponses]

export type GetSiteScenesData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: {
    /**
     * The page of results to return
     */
    page?: number
    /**
     * The number of results on page
     */
    per_page?: number
  }
  url: '/sites/{identifier}/scenes'
}

export type GetSiteScenesResponses = {
  /**
   * List Site Scenes
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
    meta?: Meta
  }
}

export type GetSiteScenesResponse = GetSiteScenesResponses[keyof GetSiteScenesResponses]

export type GetSiteJavData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: {
    /**
     * The page of results to return
     */
    page?: number
    /**
     * The number of results on page
     */
    per_page?: number
  }
  url: '/sites/{identifier}/jav'
}

export type GetSiteJavResponses = {
  /**
   * List Site Jav
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
    meta?: Meta
  }
}

export type GetSiteJavResponse = GetSiteJavResponses[keyof GetSiteJavResponses]

export type GetSiteMoviesData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: {
    /**
     * The page of results to return
     */
    page?: number
    /**
     * The number of results on page
     */
    per_page?: number
  }
  url: '/sites/{identifier}/movies'
}

export type GetSiteMoviesResponses = {
  /**
   * List Site Movies
   */
  200: {
    /**
     * An array of SceneResources
     */
    data?: Array<SceneResource>
    meta?: Meta
  }
}

export type GetSiteMoviesResponse = GetSiteMoviesResponses[keyof GetSiteMoviesResponses]

export type CreateSceneHashData = {
  /**
   * Create Scene Hash
   */
  body?: {
    /**
     * Hash
     */
    hash?: string
    type?: SceneHashEnum
    duration?: number
  }
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: never
  url: '/scenes/{identifier}/hash'
}

export type CreateSceneHashErrors = {
  /**
   * Unauthorized
   */
  403: {
    /**
     * Error message
     */
    message?: string
  }
}

export type CreateSceneHashError = CreateSceneHashErrors[keyof CreateSceneHashErrors]

export type CreateSceneHashResponses = {
  /**
   * Create Hash for Scene
   */
  200: {
    [key: string]: unknown
  }
}

export type CreateSceneHashResponse = CreateSceneHashResponses[keyof CreateSceneHashResponses]

export type CreateJavHashData = {
  /**
   * Create Jav Hash
   */
  body?: {
    /**
     * Hash
     */
    hash?: string
    type?: SceneHashEnum
    duration?: number
  }
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: never
  url: '/jav/{identifier}/hash'
}

export type CreateJavHashErrors = {
  /**
   * Unauthorized
   */
  403: {
    /**
     * Error message
     */
    message?: string
  }
}

export type CreateJavHashError = CreateJavHashErrors[keyof CreateJavHashErrors]

export type CreateJavHashResponses = {
  /**
   * Create Hash for Jav
   */
  200: {
    [key: string]: unknown
  }
}

export type CreateJavHashResponse = CreateJavHashResponses[keyof CreateJavHashResponses]

export type CreateMovieHashData = {
  /**
   * Create Movie Hash
   */
  body?: {
    /**
     * Hash
     */
    hash?: string
    type?: SceneHashEnum
    duration?: number
  }
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: never
  url: '/movies/{identifier}/hash'
}

export type CreateMovieHashErrors = {
  /**
   * Unauthorized
   */
  403: {
    /**
     * Error message
     */
    message?: string
  }
}

export type CreateMovieHashError = CreateMovieHashErrors[keyof CreateMovieHashErrors]

export type CreateMovieHashResponses = {
  /**
   * Create Hash for Movie
   */
  200: {
    [key: string]: unknown
  }
}

export type CreateMovieHashResponse = CreateMovieHashResponses[keyof CreateMovieHashResponses]

export type BulkUpdateScenesData = {
  body?: {
    items?: Array<{
      scene_id?: number
      date?: string
      hashes?: Array<{
        hash?: string
        type?: 'OSHASH' | 'PHASH'
        duration?: number | null
      }>
    }>
  }
  path?: never
  query?: never
  url: '/bulk/scene'
}

export type BulkUpdateScenesResponses = {
  /**
   * Success
   */
  200: {
    [key: string]: unknown
  }
}

export type BulkUpdateScenesResponse = BulkUpdateScenesResponses[keyof BulkUpdateScenesResponses]

export type E17E1Cbab46Bd5F9256203B1283A4E6fData = {
  body?: never
  path: {
    /**
     * The type of entity
     */
    type: 'movies' | 'scenes' | 'jav' | 'performers'
  }
  query?: {
    /**
     * The date to start from
     */
    from?: string
    /**
     * The number of results on page
     */
    per_page?: number
    /**
     * The page of results to return
     */
    page?: number
  }
  url: '/changes/{type}'
}

export type E17E1Cbab46Bd5F9256203B1283A4E6fResponses = {
  /**
   * Returns changes for an entity
   */
  200: {
    /**
     * An array of ChangesResource
     */
    data?: Array<ChangesResource>
    meta?: Meta
  }
}

export type E17E1Cbab46Bd5F9256203B1283A4E6fResponse =
  E17E1Cbab46Bd5F9256203B1283A4E6fResponses[keyof E17E1Cbab46Bd5F9256203B1283A4E6fResponses]

export type ListDirectorsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    q?: string
    /**
     * Items per page
     */
    per_page?: number
    /**
     * The page of results to return
     */
    page?: number
  }
  url: '/directors'
}

export type ListDirectorsResponses = {
  /**
   * List/Search Directors
   */
  200: {
    /**
     * An array of DirectorResource
     */
    data?: Array<DirectorResource>
    meta?: Meta
  }
}

export type ListDirectorsResponse = ListDirectorsResponses[keyof ListDirectorsResponses]

export type ListFavoritesData = {
  body?: never
  path?: never
  query?: {
    /**
     * The type of entity
     */
    type?: 'site' | 'performer'
    /**
     * The id of entity
     */
    value?: number
  }
  url: '/favourites'
}

export type ListFavoritesResponses = {
  /**
   * List/Show Favorites
   */
  200: {
    /**
     * An array of ids
     */
    data?: Array<number>
  }
}

export type ListFavoritesResponse = ListFavoritesResponses[keyof ListFavoritesResponses]

export type ToggleFavoritesData = {
  body?: never
  path?: never
  query: {
    /**
     * The type of entity
     */
    type: 'site' | 'performer'
    /**
     * The id of entity
     */
    value: number
  }
  url: '/favourites'
}

export type ToggleFavoritesResponses = {
  /**
   * Returns whether a resource is a favourite
   */
  200: {
    value?: boolean
  }
}

export type ToggleFavoritesResponse = ToggleFavoritesResponses[keyof ToggleFavoritesResponses]

export type DeleteHashesData = {
  body?: never
  path?: never
  query: {
    /**
     * The id of hash
     */
    value: number
  }
  url: '/hashes'
}

export type DeleteHashesResponses = {
  /**
   * Delete a hashes
   */
  200: {
    value?: boolean
  }
}

export type DeleteHashesResponse = DeleteHashesResponses[keyof DeleteHashesResponses]

export type F24E347F94Aa2C1088F662C13A704Data = {
  body?: never
  path?: never
  query?: never
  url: '/user/leaderboard'
}

export type F24E347F94Aa2C1088F662C13A704Responses = {
  /**
   * User Leaderboard
   */
  200: {
    idx?: number
    user_id?: number
    user_name?: string
    hash_count?: number
  }
}

export type F24E347F94Aa2C1088F662C13A704Response =
  F24E347F94Aa2C1088F662C13A704Responses[keyof F24E347F94Aa2C1088F662C13A704Responses]

export type ListPerformerSitesData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    q?: string
    /**
     * Site ID
     */
    site_id?: number
    orderBy?:
      | 'asc_name'
      | 'desc_name'
      | 'most_relevant'
      | 'recently_birth'
      | 'recently_created'
      | 'recently_updated'
      | 'reverse_birth'
      | 'reverse_created'
      | 'reverse_updated'
  }
  url: '/performer-sites'
}

export type ListPerformerSitesResponses = {
  /**
   * List/Search Performer Sites
   */
  200: {
    /**
     * An array of PerformerSiteResources
     */
    data?: Array<PerformerSiteResource>
    meta?: Meta
  }
}

export type ListPerformerSitesResponse = ListPerformerSitesResponses[keyof ListPerformerSitesResponses]

export type ListPerformersData = {
  body?: never
  path?: never
  query?: {
    /**
     * The search query
     */
    q?: string
    orderBy?: PerformerOrderEnum
    age?: number
    age_operation?: SearchOperationEnum
    band?: number
    band_operation?: SearchOperationEnum
    birthplace_code?: PerformerBirthplaceCodeEnum
    cup?: string
    ethnicity?: PerformerEthnicityEnum
    eye_colour?: PerformerEyeColourEnum
    fake_boobs?: boolean
    gender?: PerformerGenderEnum
    hair_colour?: PerformerHairColourEnum
    height?: number
    height_operation?: SearchOperationEnum
    hip?: number
    hip_operation?: SearchOperationEnum
    /**
     * The letter the name begins with
     */
    letter?: string
    same_sex_only?: boolean
    waist?: number
    waist_operation?: SearchOperationEnum
    weight?: number
    weight_operation?: SearchOperationEnum
    /**
     * The page of results to return
     */
    page?: number
    /**
     * The number of results per page
     */
    per_page?: number
  }
  url: '/performers'
}

export type ListPerformersResponses = {
  /**
   * List/Search Performers
   */
  200: {
    /**
     * An array of PerformerResources
     */
    data?: Array<PerformerResource>
    meta?: Meta
  }
}

export type ListPerformersResponse = ListPerformersResponses[keyof ListPerformersResponses]

export type GetPerformerData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: never
  url: '/performers/{identifier}'
}

export type GetPerformerErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type GetPerformerError = GetPerformerErrors[keyof GetPerformerErrors]

export type GetPerformerResponses = {
  /**
   * Get Performer
   */
  200: {
    data?: PerformerResource
  }
}

export type GetPerformerResponse = GetPerformerResponses[keyof GetPerformerResponses]

export type GetPerformerSimilarData = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: never
  url: '/performers/{identifier}/similar'
}

export type GetPerformerSimilarErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type GetPerformerSimilarError = GetPerformerSimilarErrors[keyof GetPerformerSimilarErrors]

export type GetPerformerSimilarResponses = {
  /**
   * Get Performer
   */
  200: {
    data?: PerformerResource
  }
}

export type GetPerformerSimilarResponse = GetPerformerSimilarResponses[keyof GetPerformerSimilarResponses]

export type GetPerformerSimilarByIdsData = {
  body?: never
  path?: never
  query: {
    ids: string
  }
  url: '/performers/similar'
}

export type GetPerformerSimilarByIdsErrors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type GetPerformerSimilarByIdsError = GetPerformerSimilarByIdsErrors[keyof GetPerformerSimilarByIdsErrors]

export type GetPerformerSimilarByIdsResponses = {
  /**
   * Get Performer
   */
  200: {
    data?: PerformerResource
  }
}

export type GetPerformerSimilarByIdsResponse =
  GetPerformerSimilarByIdsResponses[keyof GetPerformerSimilarByIdsResponses]

export type GetRatingData = {
  body?: never
  path?: never
  query: {
    /**
     * ID of the model
     */
    id: number
    /**
     * Type of the model
     */
    type: 'scene' | 'site' | 'performer'
  }
  url: '/ratings'
}

export type GetRatingResponses = {
  /**
   * Get Rating
   */
  200: {
    /**
     * Rating
     */
    rating?: number
  }
}

export type GetRatingResponse = GetRatingResponses[keyof GetRatingResponses]

export type AddRatingData = {
  body?: never
  path?: never
  query: {
    /**
     * ID of the model
     */
    id: number
    /**
     * Type of the model
     */
    type: 'scene' | 'site' | 'performer'
    /**
     * Rating
     */
    rating: number
  }
  url: '/ratings'
}

export type AddRatingResponses = {
  /**
   * Add Rating
   */
  200: {
    /**
     * Rating
     */
    rating?: number
  }
}

export type AddRatingResponse = AddRatingResponses[keyof AddRatingResponses]

export type ListSitesData = {
  body?: never
  path?: never
  query?: {
    /**
     * The search query
     */
    q?: string
    /**
     * The search first letter
     */
    letter?: string
    /**
     * The page of results to return
     */
    page?: number
    /**
     * The number of results per page
     */
    per_page?: number
  }
  url: '/sites'
}

export type ListSitesResponses = {
  /**
   * List/Search Sites
   */
  200: {
    /**
     * An array of SitesResource
     */
    data?: Array<SiteResource>
    meta?: Meta
  }
}

export type ListSitesResponse = ListSitesResponses[keyof ListSitesResponses]

export type Ff8A9Eed4050230F99E50E9Fd7830A00Data = {
  body?: never
  path: {
    /**
     * Identifier for this entity, can be slug, id or uuid
     */
    identifier: string
  }
  query?: never
  url: '/sites/{identifier}'
}

export type Ff8A9Eed4050230F99E50E9Fd7830A00Errors = {
  /**
   * Not Found
   */
  404: {
    /**
     * Error message
     */
    message?: string
  }
}

export type Ff8A9Eed4050230F99E50E9Fd7830A00Error =
  Ff8A9Eed4050230F99E50E9Fd7830A00Errors[keyof Ff8A9Eed4050230F99E50E9Fd7830A00Errors]

export type Ff8A9Eed4050230F99E50E9Fd7830A00Responses = {
  /**
   * Show Site
   */
  200: {
    data?: SiteResource
  }
}

export type Ff8A9Eed4050230F99E50E9Fd7830A00Response =
  Ff8A9Eed4050230F99E50E9Fd7830A00Responses[keyof Ff8A9Eed4050230F99E50E9Fd7830A00Responses]

export type ListTagsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    q?: string
    orderBy?:
      | 'asc_name'
      | 'desc_name'
      | 'most_relevant'
      | 'recently_created'
      | 'recently_updated'
      | 'reverse_created'
      | 'reverse_updated'
  }
  url: '/tags'
}

export type ListTagsResponses = {
  /**
   * List/Search Tags
   */
  200: {
    /**
     * An array of TagsResource
     */
    data?: Array<TagResource>
    meta?: Meta
  }
}

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses]

export type ToggleCollectionData = {
  body?: never
  path?: never
  query: {
    /**
     * The ID of the scene
     */
    scene_id: number
    /**
     * The type of the scene
     */
    type?: SceneTypeEnum
  }
  url: '/user/collection'
}

export type ToggleCollectionResponses = {
  /**
   * Toggle a media item in the user's collection
   */
  200: {
    value?: boolean
  }
}

export type ToggleCollectionResponse = ToggleCollectionResponses[keyof ToggleCollectionResponses]

export type MeData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/user'
}

export type MeResponses = {
  /**
   * Your User
   */
  200: UserResource
}

export type MeResponse = MeResponses[keyof MeResponses]

export type ClientOptions = {
  baseUrl: 'https://api.theporndb.net' | (string & {})
}
